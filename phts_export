#!/usr/bin/env python3

from __future__ import (absolute_import, division, print_function,
    unicode_literals)

import os
import sys
import shutil
import re
import argparse

import photosort as ps


def export_object(db, mediaroot, objfile, outroot, res):
    absfile = os.path.abspath(objfile)
    objdir = os.path.dirname(absfile)
    if not objdir.startswith(mediaroot):
        raise RuntimeError("file {} not in media directory {}"\
            .format(absfile, mediaroot))
    if ps.is_image(absfile):
        obj = ps.Image(absfile)
        outdir = os.path.join(outroot, obj.year, obj.month, obj.day)
        if not os.path.isdir(outdir):
            os.makedirs(outdir)
        print("Exporting {} to {}".format(obj.path, outdir), flush=True)
        obj.export(outdir, resolution=res)
    elif ps.is_video(absfile):
        obj = ps.Video(absfile)
        outdir = os.path.join(outroot, obj.year, obj.month, obj.day)
        if not os.path.isdir(outdir):
            os.makedirs(outdir)
        print("Exporting {} to {}".format(obj.path, outdir), flush=True)
        # Only full-size export supported for now...
        obj.export(outdir, resolution="FULL")
    else:
        print("Skipping non-media file {}".format(absfile), flush=True)
    return


def main():
    parser = argparse.ArgumentParser(\
        description="Export media with optional resizing." )
    parser.add_argument( "--photodir", required=True, default="",
        help="media directory" )
    parser.add_argument( "--out", required=True, help="output directory" )
    parser.add_argument( "--res", required=False, default="FULL",
        help="output resolution ('FULL', 'MED', 'LOW')" )

    parser.add_argument("locs", nargs="*")
    args = parser.parse_args()

    if not os.path.isdir(args.out):
        os.mkdir(args.out)

    photodir = os.path.abspath(args.photodir)

    if not os.path.isdir(photodir):
        raise RuntimeError("media directory does not exist")

    index = os.path.join(photodir, "photosync.db")

    db = ps.DB(index)

    if len(args.locs) == 0:
        # we are exporting everything...
        args.locs = [ photodir ]

    # For each specified file or directory, find all media objects and
    # export them.
    for loc in args.locs:
        if os.path.isfile(loc):
            # This is just a single file
            export_object(db, photodir, loc, args.out, args.res)
        elif os.path.isdir(loc):
            # This is a whole directory
            for root, dirs, files in os.walk(loc, topdown=True):
                for f in files:
                    objpath = os.path.join(root, f)
                    export_object(db, photodir, objpath, args.out, args.res)

    return


if __name__ == "__main__":
    main()
